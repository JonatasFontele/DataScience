{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introdução ao KNN\n",
    "\n",
    "**Objetivos**\n",
    "\n",
    "* Exemplificar a distância Euclidiana\n",
    "* Demonstração do KNN para classificação\n",
    "* Demonstração de pré-processamento de dados para o KNN\n",
    "* Demonstração do KNN para regressão\n",
    "\n",
    "**Características do Data Set**\n",
    "\n",
    "* Linhas: 59\n",
    "* Colunas: 7\n",
    "* Formato do arquivo: txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Distância Euclidiana é usada no KNN\n",
    "# Não pode ser negativa\n",
    "2-5\n",
    "(2-5)**2\n",
    "((2-5)**2)**(0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.010398644698074"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exemplo de distância entre dois pontos\n",
    "a = [5,0.75]\n",
    "b = [2,0.50]\n",
    "((5-2)**2 + (0.75 - 0.50)**2)**0.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN para classificação (rótulos de classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importando a classe\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Instanciando o método numa variável\n",
    "# Cada novo elemento será comparado aos 3 vizinhos mais próximos\n",
    "knn = KNeighborsClassifier(n_neighbors=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Vamos trabalhar novamente com as frutas\n",
    "data = pd.read_table('fruit_data_with_colors.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Atributos\n",
    "X = data[['mass','height','width','color_score']]\n",
    "\n",
    "# Label(rótulos)\n",
    "y = data['fruit_label']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Na matemática utilizamos letras maiúsculas para representar matrizes\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=3)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Para avaliar o modelo\n",
    "# A divisão de treino e teste divide os dados de maneira aleatória\n",
    "# Um bom acerto é acima de 70% ou 80%\n",
    "# A ordem de grandeza dos dados vai influenciar na distância no knn\n",
    "knn.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pré-processando os dados para o KNN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Função para conversão de escala\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Armazenando a função\n",
    "mm = MinMaxScaler()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.3       , 0.53846154, 0.5       , 0.81578947],\n",
       "       [1.        , 0.8       , 1.        , 0.52631579],\n",
       "       [0.45714286, 0.8       , 0.5       , 0.57894737],\n",
       "       [0.22857143, 0.47692308, 0.26470588, 0.44736842],\n",
       "       [0.26428571, 0.6       , 0.38235294, 0.52631579],\n",
       "       [0.44285714, 1.        , 0.44117647, 0.44736842],\n",
       "       [0.15714286, 0.67692308, 0.05882353, 0.5       ],\n",
       "       [0.15      , 0.63076923, 0.08823529, 0.39473684],\n",
       "       [0.39285714, 0.8       , 0.41176471, 0.44736842],\n",
       "       [0.95      , 0.83076923, 0.94117647, 0.52631579],\n",
       "       [0.5       , 0.95384615, 0.44117647, 0.42105263],\n",
       "       [0.30714286, 0.47692308, 0.5       , 0.73684211],\n",
       "       [0.3       , 0.55384615, 0.38235294, 0.55263158],\n",
       "       [0.03571429, 0.10769231, 0.11764706, 0.65789474],\n",
       "       [0.19285714, 0.64615385, 0.05882353, 0.42105263],\n",
       "       [0.27857143, 0.47692308, 0.35294118, 0.86842105],\n",
       "       [0.27857143, 0.53846154, 0.38235294, 0.60526316],\n",
       "       [0.32142857, 0.50769231, 0.32352941, 1.        ],\n",
       "       [0.29285714, 0.53846154, 0.38235294, 0.63157895],\n",
       "       [0.23571429, 0.58461538, 0.52941176, 0.52631579],\n",
       "       [0.14285714, 0.63076923, 0.02941176, 0.47368421],\n",
       "       [0.22857143, 0.47692308, 0.44117647, 0.84210526],\n",
       "       [0.27857143, 0.50769231, 0.44117647, 0.63157895],\n",
       "       [0.14285714, 0.56923077, 0.14705882, 0.44736842],\n",
       "       [0.01428571, 0.04615385, 0.        , 0.57894737],\n",
       "       [0.40714286, 0.63076923, 0.5       , 0.5       ],\n",
       "       [0.27142857, 0.69230769, 0.20588235, 0.44736842],\n",
       "       [0.        , 0.        , 0.        , 0.68421053],\n",
       "       [0.41428571, 0.50769231, 0.76470588, 0.        ],\n",
       "       [0.32857143, 0.55384615, 0.5       , 0.47368421],\n",
       "       [0.29285714, 0.58461538, 0.41176471, 0.57894737],\n",
       "       [0.42142857, 0.96923077, 0.41176471, 0.39473684],\n",
       "       [0.31428571, 0.56923077, 0.44117647, 0.39473684],\n",
       "       [0.28571429, 0.53846154, 0.52941176, 0.31578947],\n",
       "       [0.30714286, 0.49230769, 0.47058824, 0.78947368],\n",
       "       [0.47857143, 0.61538462, 0.58823529, 0.71052632],\n",
       "       [0.14285714, 0.69230769, 0.08823529, 0.42105263],\n",
       "       [0.31428571, 0.46153846, 0.41176471, 0.65789474],\n",
       "       [0.35714286, 0.49230769, 0.47058824, 0.13157895],\n",
       "       [0.34285714, 0.55384615, 0.38235294, 0.97368421],\n",
       "       [0.36428571, 0.58461538, 0.38235294, 0.97368421],\n",
       "       [0.3       , 0.52307692, 0.35294118, 0.68421053],\n",
       "       [0.42857143, 0.87692308, 0.44117647, 0.44736842],\n",
       "       [0.27857143, 0.49230769, 0.41176471, 0.71052632]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transforma os dados de treino de acordo com os valores máximos e mínimos armazenados\n",
    "X_train = mm.fit_transform(X_train)\n",
    "\n",
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.15      , 0.61538462, 0.02941176, 0.44736842],\n",
       "       [0.37142857, 0.43076923, 0.64705882, 0.10526316],\n",
       "       [0.37142857, 0.64615385, 0.52941176, 0.63157895],\n",
       "       [1.02142857, 0.8       , 1.11764706, 0.5       ],\n",
       "       [0.28571429, 0.47692308, 0.55882353, 0.36842105],\n",
       "       [0.27142857, 0.50769231, 0.52941176, 0.36842105],\n",
       "       [0.2       , 0.72307692, 0.        , 0.47368421],\n",
       "       [0.24285714, 0.52307692, 0.29411765, 0.52631579],\n",
       "       [0.14285714, 0.53846154, 0.05882353, 0.44736842],\n",
       "       [0.28571429, 0.52307692, 0.47058824, 0.76315789],\n",
       "       [0.35      , 0.93846154, 0.44117647, 0.44736842],\n",
       "       [0.33571429, 0.6       , 0.52941176, 0.86842105],\n",
       "       [0.34285714, 0.46153846, 0.47058824, 0.89473684],\n",
       "       [0.02857143, 0.09230769, 0.05882353, 0.63157895],\n",
       "       [0.01428571, 0.04615385, 0.02941176, 0.68421053]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Transforma os dados de teste de treino de acordo com os valores máximos e mínimos armazenados\n",
    "X_test = mm.transform(X_test)\n",
    "\n",
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retreinando o knn\n",
    "knn = KNeighborsClassifier(n_neighbors=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(n_neighbors=3)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Ao comparar os dados de teste e os seus rótulos ao resultado destes dados de teste no modelo, deu 100% de acerto\n",
    "knn.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([4, 1, 3, 3, 1, 1, 4, 3, 4, 1, 4, 1, 1, 2, 2], dtype=int64)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Para predizer apenas os resultados\n",
    "knn.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "52    4\n",
       "1     1\n",
       "41    3\n",
       "26    3\n",
       "15    1\n",
       "14    1\n",
       "49    4\n",
       "39    3\n",
       "51    4\n",
       "21    1\n",
       "48    4\n",
       "23    1\n",
       "9     1\n",
       "4     2\n",
       "6     2\n",
       "Name: fruit_label, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### KNN para Regressão (rótulos são números ordenáveis)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Média dos rótulos dos vizinhos mais próximos \n",
    "from sklearn.neighbors import KNeighborsRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "knn = KNeighborsRegressor(n_neighbors=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# O conjuntos de dados de frutas é um dataset para classificação, portanto usaremos este novo para exemplo\n",
    "from sklearn.datasets import load_boston"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Preço de casa de diferentes regiões de Boston\n",
    "data = load_boston()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Já separa os atributos e os rótulos\n",
    "X, y = load_boston(return_X_y=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506, 13)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(506,)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 506 rótulos, que seriam os preços das casas de cada região (a média do preço das casas de cada região)\n",
    "y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _boston_dataset:\n",
      "\n",
      "Boston house prices dataset\n",
      "---------------------------\n",
      "\n",
      "**Data Set Characteristics:**  \n",
      "\n",
      "    :Number of Instances: 506 \n",
      "\n",
      "    :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target.\n",
      "\n",
      "    :Attribute Information (in order):\n",
      "        - CRIM     per capita crime rate by town\n",
      "        - ZN       proportion of residential land zoned for lots over 25,000 sq.ft.\n",
      "        - INDUS    proportion of non-retail business acres per town\n",
      "        - CHAS     Charles River dummy variable (= 1 if tract bounds river; 0 otherwise)\n",
      "        - NOX      nitric oxides concentration (parts per 10 million)\n",
      "        - RM       average number of rooms per dwelling\n",
      "        - AGE      proportion of owner-occupied units built prior to 1940\n",
      "        - DIS      weighted distances to five Boston employment centres\n",
      "        - RAD      index of accessibility to radial highways\n",
      "        - TAX      full-value property-tax rate per $10,000\n",
      "        - PTRATIO  pupil-teacher ratio by town\n",
      "        - B        1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town\n",
      "        - LSTAT    % lower status of the population\n",
      "        - MEDV     Median value of owner-occupied homes in $1000's\n",
      "\n",
      "    :Missing Attribute Values: None\n",
      "\n",
      "    :Creator: Harrison, D. and Rubinfeld, D.L.\n",
      "\n",
      "This is a copy of UCI ML housing dataset.\n",
      "https://archive.ics.uci.edu/ml/machine-learning-databases/housing/\n",
      "\n",
      "\n",
      "This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University.\n",
      "\n",
      "The Boston house-price data of Harrison, D. and Rubinfeld, D.L. 'Hedonic\n",
      "prices and the demand for clean air', J. Environ. Economics & Management,\n",
      "vol.5, 81-102, 1978.   Used in Belsley, Kuh & Welsch, 'Regression diagnostics\n",
      "...', Wiley, 1980.   N.B. Various transformations are used in the table on\n",
      "pages 244-261 of the latter.\n",
      "\n",
      "The Boston house-price data has been used in many machine learning papers that address regression\n",
      "problems.   \n",
      "     \n",
      ".. topic:: References\n",
      "\n",
      "   - Belsley, Kuh & Welsch, 'Regression diagnostics: Identifying Influential Data and Sources of Collinearity', Wiley, 1980. 244-261.\n",
      "   - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Para entender melhor\n",
    "print(load_boston()['DESCR'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(n_neighbors=3)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A partir desse momento a execução do knn para regressão é igual a execução do knn para classificação\n",
    "# O knn pra regressão armazenou os valores de treino \n",
    "knn.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5033785852997994"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Resultado da regressão em cima deste conjunto de dados\n",
    "knn.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Usar o minmaxscaler"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
